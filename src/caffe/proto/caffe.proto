package caffe;

message BlobProto {
  optional int32 num = 1 [default = 0];
  optional int32 channels = 2 [default = 0];
  optional int32 height = 3 [default = 0];
  optional int32 width = 4 [default = 0];
  repeated float data = 5 [packed = true];
  repeated float diff = 6 [packed = true];
}

message Datum {
  optional int32 channels = 1;
  optional int32 height = 2;
  optional int32 width = 3;
  // the actual image data, in bytes
  optional bytes data = 4;
  optional int32 label = 5;
  // optionally, the datum could also hold float data
  repeated float float_data = 6;
}

message FillerParameter {
  optional string type = 1 [default = 'constant'];
  optional float value = 2 [default = 0]; // the value in constant filler
  optional float min = 3 [default = 0]; // the min value in uniform filler
  optional float max = 4 [default = 1]; // the max value in uniform filler
  optional float mean = 5 [default = 0]; // the mean value in gaussian filler
  optional float std = 6 [default = 1]; // the std value in gaussian filler
}

message LayerParameter {
  optional string name = 1;
  optional string type = 2;

  // parameters to specify layers with inner products
  optional uint32 num_output = 3;
  optional bool biasterm = 4 [default = true]; // whether to have bias term
  optional FillerParameter weight_filler = 5; // the filler for the weight
  optional FillerParameter bias_filler = 6; // the filler for the bias

  optional uint32 pad = 7 [default = 0]; // the padding size
  optional uint32 kernelsize = 8; // the kernel size
  optional uint32 group = 9 [default = 1]; // the group size for group conv
  optional uint32 stride = 10 [default = 1]; // the stride
  enum PoolMethod {
    MAX = 0;
    AVE = 1;
  }
  optional PoolMethod pool = 11 [default = MAX]; // the pooling method
  optional float dropout_ratio = 12 [default = 0.5]; // dropout ratio

  optional uint32 local_size = 13 [default = 5]; // for local response norm
  optional float alpha = 14 [default = 1.]; // for local response norm
  optional float beta = 15 [default = 0.75]; // for local response norm

  // for data layers, specify the data source
  optional string source = 16;
  // for data pre-processing, we can do simple scaling and constant subtraction
  optional float scale = 17 [default = 1];
  optional float subtraction = 18 [default = 0];
  // for data layers, specify the batch size
  optional uint32 batchsize = 19;
  // for data layers, specify if we would like to randomly crop an image
  optional uint32 cropsize = 20 [default = 0];

  // the blobs containing the numeric parameters of the layer
  repeated BlobProto blobs = 50;
}

message LayerConnection {
  optional LayerParameter layer = 1; // the layer parameter
  repeated string bottom = 2; // the name of the bottom blobs
  repeated string top = 3; // the name of the top blobs
}

message NetParameter {
  optional string name = 1; // consider giving the network a name
  repeated LayerConnection layers = 2; // a bunch of layers
  repeated string input = 3; // the input to the network
}

message SolverParameter {
  optional float base_lr = 1; // the base learning rate
  optional int32 display = 2; // display options. 0 = no display
  optional int32 max_iter = 3; // the maximum number of iterations
  optional int32 snapshot = 4 [default = 0]; // the snapshot interval
  optional string lr_policy = 5; // the learning rate decay policy
  optional float min_lr = 6 [default = 0]; // the minimum learning rate
  optional float max_lr = 7 [default = 1e10]; // the maximum learning rate
  optional float gamma = 8; // the parameter to compute the learning rate
  optional float power = 9; // the parameter to compute the learning rate
  optional float momentum = 10; // the momentum value
  optional float weight_decay = 11; // the weight decay

  optional string snapshot_prefix = 12; // the prefix for the snapshot
}

